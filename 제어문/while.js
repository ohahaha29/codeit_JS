// while문(while statement)
/* while (조건 부분) {
    동작부분
} */

let i = 30; // for문과 다르게 초기화 부분이 없기 때문에 반복에 필요한 횟수 카운드하려면 반복문 밖에서 글로벌 변수를 미리 만들어줘야 한다.

while (i % 7 !== 0) {
    i++; // while문에는 추가 동작 부분이 없기 때문에 동작 부분 안에서 반복 횟수를 증가시키는 부분을 작성한다.
}

console.log(i);

/* while문을 활용해서 i보다 큰수 중에서 가장 작은 7의 배수를 찾는 코드
1. 가장 먼저 변수 i를 선언하고 30을 할당 -> 30보다 큰 수 중에서 가장 작은 7의 배수를 찾는다.
2. while문이 시작되면 30인 i가 조건 부분에서 평가된다.
3. 30을 7로 나누면 몫이 4고 나머지는 2 -> 2는 0과 일치하지 않기 때문에 true가 돼서 i가 1이 증가한다.
4. 31인 i가 또 평가되고 반복하다가 i가 35가 되는 순간 조건식이 flase가 되고 반복문이 종료된다.

5. for문은 조건 비교에 사용되는 값을 반복문 내부에서만 사용하고 반복이 끝나면 외부에서는 사용할 수 없다.
6. 글로벌 변수를 조건 비교하여 사용하고 반복문 내부에서도 다루면서 결과적으로 반복문이 종료된 다음에도 이 변수를 사용해야 될 때는 while문 활용한다. */


// while문 연습(1)
/*
1. i를 1부터 100까지 반복하면서 2로 나눴을 때 나머지가 1일 때만 i를 출력하는 방법
i를 1부터 100까지 반복하면서 i를 출력하려면 다음과 같이 작성하면 됩니다.
let i = 1;

while (i <= 100) {
    console.log(i);
    i++;
}

여기서 만약 i를 2로 나눴을 때 나머지가 0일 때 i를 출력하려면, if문과 나머지연산(%)을 활용해서 다음과 같이 코드를 작성 */
let i = 1;

while (i <= 100) {
    if (i % 2 === 1) {
        console.log(i);
    }
    i++;
}


// while문 연습(2)
/*
1. 약수 모두 출력하기: 180의 약수를 모두 찾기
180이 1로 나누어떨어지는지 확인하고, 2로 나누어떨어지는지 확인하고, 3으로 나누어떨어지는지 확인하고... 이런 식으로 180까지 나누어떨어지는지 확인
'나누어떨어진다'는 코드 -> 변수 i가 4로 나누어떨어진다면, i % 4 === 0은 true가 나올 것입니다.

const N = 180;
let i = 1;

while (i <= N) {
    if (N % i === 0) {
        console.log(i);
    }
    i += 1;
}
참고로 i += 1은 if문 밖에 있어야 한다. 그렇지 않으면 끝이 안 나는 "무한 루프"에 빠진다.

2. 약수 세기
문제에서는 약수를 모두 출력하는 것뿐만 아니라 약수의 총 개수도 출력
개수를 세기 위한 변수를 만들기 ex) let count = 0;
if문 안쪽에서 180의 약수를 발견했을 때마다 1씩 늘려주게 한다.

const N = 180;

let i = 1;
let count = 0;

while (i <= N) {
    if (N % i === 0) {
        console.log(i);
        count++;
    }
    i += 1;
}

3. 문장 출력하기
끝으로 마지막 문장을 출력 */

const N = 180;

let i = 1;
let count = 0;

while (i <= N) {
    if (N % i === 0) {
        console.log(i);
        count++;
    }
    i += 1;
}

console.log(`${N}의 약수는 총 ${count}개입니다.`);